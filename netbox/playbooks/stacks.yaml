---
# Examples how to use:
# ansible-playbook playbooks/stacks.yaml --tags aruba_stack_modular,production,switches
# ansible-playbook playbooks/stacks.yaml --tags aruba_stack_modular,production,modules
#
# ansible-playbook playbooks/stacks.yaml --tags aruba_stack,development,interfaces
#
# ansible-playbook playbooks/stacks.yaml --tags aruba_stack,development,chassis
#
# ansible-playbook playbooks/stacks.yaml --tags aruba_stack,development,trunks
# ansible-playbook playbooks/stacks.yaml --tags aruba_stack,development,create_vlans
# ansible-playbook playbooks/stacks.yaml --tags aruba_stack,development,untagged_vlans
# ansible-playbook playbooks/stacks.yaml --tags aruba_stack,development,tagged_vlans
# ansible-playbook playbooks/stacks.yaml --tags aruba_stack,development,ip
#


- name: Add HP Switches from configuration files
  hosts: localhost
  gather_facts: false
  vars: 
    netbox_url: "https://{{ netbox_server }}"
  tasks:
    - name: Include development server variables
      tags: development
      include_vars:
        file: ../src/development_server.yaml

    - name: Include production server variables
      tags: production
      include_vars:
        file: ../src/production_server.yaml

    - name: Include data for Aruba stacked switches
      tags: aruba_stack
      include_vars:
        file: ../data/yaml/aruba_stack.yaml

    - name: Include data for Aruba 2930 stacked switches with mini modules
      tags: aruba_stack_2930
      include_vars:
        file: ../data/yaml/aruba_stack_2930.yaml

    - name: Include data for Aruba 2920 stacked switches with mini modules
      tags: aruba_stack_2920
      include_vars:
        file: ../data/yaml/aruba_stack_2920.yaml

    - name: Include data for Aruba modular stacked switches with mini modules
      tags: aruba_stack_modular
      include_vars:
        file: ../data/yaml/aruba_modular_stack.yaml

    - name: Include data for testing
      tags: test
      include_vars:
        file: ../data/yaml/test.yaml

    - name: Create a Room (location)
      tags: 
        - location
        - add_switches
        - switches
      netbox.netbox.netbox_location:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          name: "{{ item.name }}"
          site: "{{ item.site }}"
          parent_location: "{{ item.parent_location }}"
        state: present
      loop: "{{ locations }}"
      when: false

    - name: Add stacked switches
      tags: 
        - add_switches
        - switches
      netbox.netbox.netbox_device:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          name: "{{ item.name }}"
          site: "{{ item.site }}"
          location: "{{ item.location }}"
          device_type: "{{ item.device_type }}" 
          device_role: "{{ item.device_role }}"
          serial: "{{ item.serial }}"
          tags: "{{ item.tags }}"
          tenant: netzadmin
        state: present
      loop: "{{ devices }}"

    - name: Delete virtual chassis 
      tags: 
        - delete_chassis
        - switches
      netbox.netbox.netbox_virtual_chassis:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          name: "{{ item.name }}"
        state: absent
      loop: "{{ chassis }}"

    - name: Delete slave's default interfaces
      tags: 
        - delete_slaves_interfaces
        - switches
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          device: "{{ item.hostname }}"
          name: "{{ item.interface }}"
        state: absent
      loop: "{{ delete_interfaces }}"

    - name: Delete module bays
      tags:
        - delete_bays
        - modules
      netbox.netbox.netbox_module_bay:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          device: "{{ item.device }}"
          name: "{{ item.name }}"
          position: "{{ item.module_bay }}"
        state: absent
      loop: "{{ modules }}"
      when: modular

    - name: Create module bays
      tags:
        - create_bays
        - modules
      netbox.netbox.netbox_module_bay:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          device: "{{ item.device }}"
          name: "{{ item.device }}-{{ item.module_bay }}"
          position: "{{ item.new_position }}"
          label: "{{ item.new_position }}"
          description: "{{ item.type }}"
        state: present
      loop: "{{ modules }}"
      when: modular

    - name: Add/Update interfaces
      tags: 
        - interfaces
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          device: "{{ item.hostname }}"
          name: "{{ item.interface }}"
          description: "{{ item.name }}"
          type: "{{ item.type }}"
          poe_mode: "{{ item.poe_mode }}"
          poe_type: "{{ item.poe_type }}"
        state: present
      loop: "{{ device_interfaces }}"

    - name: Create virtual chassis 
      tags: 
        - create_chassis
        - chassis
      netbox.netbox.netbox_virtual_chassis:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          name: "{{ item.name }}"
          master: "{{ item.master }}"
          tags:
            - stack
        state: present
      loop: "{{ chassis }}"
      #when: master_device_map[item.master] is not none
      when: item.name != "rggw4121sp" # ignore a 10 stack items (it has issues reading 'master' line. i.e '1' or '10')

    - name: Assign switches to chassis
      tags: 
        - assign_switches
        - chassis
      netbox.netbox.netbox_device:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          name: "{{ item.name }}"
          site: "{{ item.site }}"
          device_type: "{{ item.device_type }}" 
          device_role: "{{ item.device_role }}"
          serial: "{{ item.serial }}"
          tags: "{{ item.tags }}"
          tenant: netzadmin
          virtual_chassis: "{{ item.virtual_chassis }}"
          vc_position: "{{ item.vc_position }}"
          vc_priority: "{{ item.vc_priority }}"
        state: present
      loop: "{{ devices }}"

    - name: Create Trunk interfaces as LAG
      tags:
        - lags
        - trunks
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          device: 
            name: "{{ item.hostname }}"
          name: "{{ item.name }}"
          type: Link Aggregation Group (LAG)
        update_vc_child: true
        state: present
      loop: "{{ trunks }}"

    - name: Assign interfaces to Trunks
      tags:
        - trunk_interfaces
        - trunks
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          device: 
            name: "{{ item.hostname }}"
          name: "{{ item.interface }}"
          lag:
            name: "{{ item.trunk_name }}"
        update_vc_child: true
        state: present
      loop: "{{ trunk_interfaces }}"

    - name: Create VLANs
      tags:
        - create_vlans
        - vlans
      netbox.netbox.netbox_vlan:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          name: "{{ item.name }}"
          vid: "{{ item.id }}"
        state: present
      loop: "{{ vlans }}"
    
    - name: Assign untagged vlans to interfaces
      tags:
        - untagged_vlans
        - vlans
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        update_vc_child: true
        data:
          device: "{{ item.hostname }}"
          name: "{{ item.interface }}"
          mode: Access
          untagged_vlan: 
            vlan_id: "{{ item.vlan_id }}"
            name: "{{ item.vlan_name }}"
      loop: "{{ untagged_vlans }}"

    - name: Assign tagged vlans to interfaces
      tags: 
        - tagged_vlans
        - vlans
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        update_vc_child: true
        data:
          device: "{{ item.hostname }}"
          name: "{{ item.interface }}"
          mode: Tagged
          tagged_vlans: "{{ item.tagged_vlans }}"
      loop: "{{ tagged_vlans }}"

    - name: Create VLAN interfaces for loopback IPs
      tags:
        - loopback
        - vlans
        - ip
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          device: "{{ item.hostname }}"
          name: "vlan {{ item.vlan_id }}"
          type: Virtual
          description: "{{ item.vlan_name }}"
        state: present
      loop: "{{ ip_addresses }}"

    - name: Assign IP to VLAN interfaces
      tags:
        - assign_ip
        - vlans
        - ip
      netbox.netbox.netbox_ip_address:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          address: "{{ item.ip }}"
          dns_name: "{{ item.hostname }}"
          description: "VLAN {{ item.vlan_id }} ({{ item.vlan_name }})"
          assigned_object:
            device: "{{item.hostname }}"
            name: "vlan {{ item.vlan_id }}"
          role: Loopback
          tenant: netzadmin
        state: present
      loop: "{{ ip_addresses }}"

    - name: Assign IP addresses to devices
      tags:
        - ip_to_devices
        - ip
      netbox.netbox.netbox_device:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          name: "{{ item.hostname }}"
          primary_ip4: "{{ item.ip }}"
        state: present
      loop: "{{ ip_addresses }}"

    - name: Debug NetBox ID device lookup for each master in a chassis
      tags: debug
      ansible.builtin.debug:
        msg: "Master {{ item.master }} ID: {{ 
          query('netbox.netbox.nb_lookup', 'devices', 
          api_endpoint = netbox_url,
          api_filter = 'name={}'.format(item.master),
          token = netbox_token,
          validate_certs = false )[0]['value']['id']
          }}"
      loop: "{{ chassis }}"

    - name: Get exact device IDs for all masters
      tags: debug
      ansible.builtin.set_fact:
        master_device_map: >-
          {{
            master_device_map | default({}) |
            combine({
            item.master: (
            query('netbox.netbox.nb_lookup', 'devices', 
            api_endpoint = netbox_url,
            api_filter = 'name={}'.format(item.master),
            token = netbox_token,
            validate_certs = false )[0]['value']['id']
            )})
          }}
      loop: "{{ chassis }}"

    - name: "Debug: show the master_device_map dict"
      tags: debug
      ansible.builtin.debug:
        msg: "{{ master_device_map }}"

    - name: "Debug: show IDs for masters"
      tags: debug 
      ansible.builtin.debug:
        msg: "{{ item.master }} - {{ master_device_map[item.master] }}"
      loop: "{{ chassis }}"
