---
# Examples how to use:
# ansible-playbook playbooks/stacks.yaml --tags cisco,production,switches




# ansible-playbook playbooks/stacks.yaml --tags cisco,production,modules
#
# ansible-playbook playbooks/stacks.yaml --tags cisco,development,switches
#
# ansible-playbook playbooks/stacks.yaml --tags cisco,development,interfaces
#
# ansible-playbook playbooks/stacks.yaml --tags cisco,development,chassis
#
# ansible-playbook playbooks/stacks.yaml --tags cisco,development,trunks
# ansible-playbook playbooks/stacks.yaml --tags cisco,development,create_vlans
# ansible-playbook playbooks/stacks.yaml --tags cisco,development,untagged_vlans
# ansible-playbook playbooks/stacks.yaml --tags cisco,development,tagged_vlans
# ansible-playbook playbooks/stacks.yaml --tags cisco,development,ip
#


- name: Add HP Switches from configuration files
  hosts: localhost
  gather_facts: false
  vars: 
    netbox_url: "https://{{ netbox_server }}"
  tasks:
    - name: Include development server variables
      tags: development
      include_vars:
        file: ../data/src/development_server.yaml

    - name: Include production server variables
      tags: production
      include_vars:
        file: ../data/src/production_server.yaml

    - name: Include data for Cisco devices
      tags: cisco
      include_vars:
        file: ../data/yaml/cisco.yaml

    - name: Include data for testing
      tags: test
      include_vars:
        file: ../data/yaml/test.yaml

    - name: Add stacked switches
      tags: switches
      netbox.netbox.netbox_device:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          name: "{{ item.name }}"
          site: "{{ item.site }}"
          device_type: "{{ item.device_type }}" 
          device_role: "{{ item.device_role }}"
          serial: "{{ item.serial }}"
          tags: "{{ item.tags }}"
          tenant: netzadmin
        state: present
      loop: "{{ devices }}"

    - name: Delete default interfaces
      tags: 
        - delete_default_interfaces
        - switches
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          device: "{{ item.name }}"
          name: "{{ item.interface }}"
        state: absent
      loop: "{{ device_interfaces }}"

    - name: Add stack interfaces
      tags: 
        - stack_interfaces
        - switches
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          device: "{{ item.name }}"
          name: "{{ item.stack_nr }}/{{ item.interface }}"
          type: "{{ item.type }}"
          poe_mode: "{{ item.poe_mode }}"
          poe_type: "{{ item.poe_type }}"
        state: present
      loop: "{{ device_interfaces }}"
      when: "{{ add_stack_interfaces }}"

    - name: Delete virtual chassis 
      tags: 
        - delete_chassis
      netbox.netbox.netbox_virtual_chassis:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          name: "{{ item.name }}"
        state: absent
      loop: "{{ chassis }}"

    - name: Delete module bays
      tags:
        - delete_bays
        - modules
      netbox.netbox.netbox_module_bay:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          device: "{{ item.device }}"
          name: "{{ item.name }}"
          position: "{{ item.module_bay }}"
        state: absent
      loop: "{{ modules }}"
      when: "{{ modular }}"

    - name: Create module bays
      tags:
        - create_bays
        - modules
      netbox.netbox.netbox_module_bay:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          device: "{{ item.device }}"
          name: "{{ item.device }}-{{ item.module_bay }}"
          position: "{{ item.new_position }}"
          label: "{{ item.new_position }}"
          description: "{{ item.type }}"
        state: present
      loop: "{{ modules }}"
      when: "{{ modular }}"

    - name: Install modules
      tags:
        - install_modules
        - modules
      netbox.netbox.netbox_module:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          device: "{{ item.device }}"
          module_bay: "{{ item.device }}-{{ item.module_bay }}"
          module_type: "{{ item.type }}"
          description: "{{ item.type }}"
          status: active
        state: present
      loop: "{{ modules }}"
      when: "{{ modular }}"

    - name: Create Trunk interfaces as LAG
      tags:
        - lags
        - trunks
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          device: 
            name: "{{ item.hostname }}"
          name: "{{ item.name }}"
          type: Link Aggregation Group (LAG)
        update_vc_child: true
        state: present
      loop: "{{ trunks }}"

    - name: Assign interfaces to Trunks
      tags:
        - trunk_interfaces
        - trunks
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          device: 
            name: "{{ item.hostname }}"
          name: "{{ item.interface }}"
          lag:
            name: "{{ item.trunk_name }}"
        update_vc_child: true
        state: present
      loop: "{{ trunk_interfaces }}"

    - name: Update interfaces description (here name)
      tags:
        - interfaces
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          device: "{{ item.hostname }}"
          name: "{{ item.interface }}"
          description: "{{ item.name }}"
        state: present
      loop: "{{ interface_names }}"

    - name: Create VLANs
      tags:
        - create_vlans
        - vlans
      netbox.netbox.netbox_vlan:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          name: "{{ item.name }}"
          vid: "{{ item.id }}"
        state: present
      loop: "{{ vlans }}"
    
    - name: Assign untagged vlans to interfaces
      tags:
        - untagged_vlans
        - vlans
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        update_vc_child: true
        data:
          device: "{{ item.hostname }}"
          name: "{{ item.interface }}"
          mode: Access
          untagged_vlan: 
            vlan_id: "{{ item.vlan_id }}"
            name: "{{ item.vlan_name }}"
      loop: "{{ untagged_vlans }}"

    - name: Assign tagged vlans to interfaces
      tags: 
        - tagged_vlans
        - vlans
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        update_vc_child: true
        data:
          device: "{{ item.hostname }}"
          name: "{{ item.interface }}"
          mode: Tagged
          tagged_vlans: "{{ item.tagged_vlans }}"
      loop: "{{ tagged_vlans }}"

    - name: Create VLAN interfaces for loopback IPs
      tags:
        - loopback
        - vlans
        - ip
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          device: "{{ item.hostname }}"
          name: "vlan {{ item.vlan_id }}"
          type: Virtual
          description: "{{ item.vlan_name }}"
        state: present
      loop: "{{ ip_addresses }}"

    - name: Assign IP to VLAN interfaces
      tags:
        - assign_ip
        - vlans
        - ip
      netbox.netbox.netbox_ip_address:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          address: "{{ item.ip }}"
          dns_name: "{{ item.hostname }}"
          description: "VLAN {{ item.vlan_id }} ({{ item.vlan_name }})"
          assigned_object:
            device: "{{item.hostname }}"
            name: "vlan {{ item.vlan_id }}"
          role: Loopback
          tenant: netzadmin
        state: present
      loop: "{{ ip_addresses }}"

    - name: Assign IP addresses to devices
      tags:
        - ip_to_devices
        - ip
      netbox.netbox.netbox_device:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          name: "{{ item.hostname }}"
          primary_ip4: "{{ item.ip }}"
        state: present
      loop: "{{ ip_addresses }}"

    - name: Create virtual chassis 
      tags: 
        - create_chassis
        - chassis
      netbox.netbox.netbox_virtual_chassis:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          name: "{{ item.name }}"
          master: "{{ item.name + '-1' | regex_replace('0') }}" 
          #master: "{{ item.master }}"
          tags:
            - stack
        state: present
      loop: "{{ chassis }}"
      when: item.name != "rggw4121sp" # ignore a 10 stack items (it has issues reading 'master' line. i.e '1' or '10')

    - name: Assign switches to chassis
      tags: 
        - assign_switches
        - chassis
      netbox.netbox.netbox_device:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        validate_certs: false
        data:
          name: "{{ item.name }}"
          site: "{{ item.site }}"
          device_type: "{{ item.device_type }}" 
          device_role: "{{ item.device_role }}"
          serial: "{{ item.serial }}"
          tags: "{{ item.tags }}"
          tenant: netzadmin
          virtual_chassis: "{{ item.virtual_chassis }}"
          vc_position: "{{ item.vc_position }}"
          vc_priority: "{{ item.vc_priority }}"
        state: present
      loop: "{{ devices }}"
