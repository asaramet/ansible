---
- name: Define global variables
  hosts: localhost
  gather_facts: false
  tags: global
  vars: 
    netbox_version: &netbox_version 4.0.6
    sql_user_pass: &sql_user_pass "{{ vault_sql_user_pass }}" # have to be specified in the vault for every `server` group/host

    #server: &server debian12-ansible
    server: &server hs_netbox 
    #production: &production false
    production: &production true
    reboot: &reboot false

- name: Install packages and dependencies for NetBox
  hosts: *server
  gather_facts: false
  become: true # run as root
  tags: apt_install
  tasks: 
    - name: apt install
      apt: 
        pkg: "{{ item }}"
        state: latest
        update_cache: true
      loop:
        - postgresql
        - python3-psycopg2
        - redis-server
        - python3-dev 
        - python3-venv 
        - python3-virtualenv # will be depricated and not needed in later Django module versions
        - build-essential 
        - libxml2-dev 
        - libxslt1-dev 
        - libffi-dev 
        - libpq-dev 
        - libssl-dev 
        - zlib1g-dev

- name: Configure PostgreSQL on Debian
  hosts: *server
  gather_facts: false
  become: true # run as root
  tags: postgresql
  become_method: su
  become_user: postgres # change to postgres user
  vars:
    sql_user_pass: *sql_user_pass
  tasks: 
    - name: Create a new PostgreSQL database with the name 'netbox'
      community.postgresql.postgresql_db:
        name: netbox
        comment: NetBox database
      
    - name: Create a new user 'netbox' in the netbox database
      community.postgresql.postgresql_user:
        db: netbox
        name: netbox
        password: "{{ sql_user_pass }}"
        role_attr_flags: SUPERUSER
        comment: NetBox as a user

- name: Configure default apps
  hosts: *server
  gather_facts: false
  become: true # run as root
  tags: apps
  vars:
    netbox_version: *netbox_version
  tasks:
    - name: Unpack the netbox package version "{{ netbox_version }}" from local folder to '/opt'
      unarchive:
        src: "{{ inventory_dir }}/src/v{{ netbox_version }}.tar.gz"
        dest: /opt

    - name: Create a relative symlink to the 'netbox' folder
      file:
        src: "/opt/netbox-{{ netbox_version }}"
        dest: /opt/netbox
        state: link

    - name: Create the 'netbox' system group
      group:
        name: netbox
        state: present
        system: true

    - name: Create the 'netbox' system user that belongs to 'netbox' group
      user:
        name: netbox
        group: netbox
        system: true
      
    - name: Copy local 'configuration.py' to remote 'netbox' directory
      copy:
        src: "{{ local_src_folder }}/configuration.py"
        dest: /opt/netbox/netbox/netbox
        owner: netbox
        group: netbox

    - name: Create a relative symlink to schedule NetBox housekeeping task
      file:
        src: /opt/netbox/contrib/netbox-housekeeping.sh 
        dest: /etc/cron.daily/netbox-housekeeping
        state: link

    - name: Copy gunicorn configs 
      copy:
        src: "{{ local_src_folder }}/gunicorn.py"
        dest: /opt/netbox/gunicorn.py 
        owner: netbox
        group: netbox
        mode: 0660
        backup: yes

- name: Install python apps in netbox virtual environment
  hosts: *server
  gather_facts: false
  become: true # run as root
  tags: pip
  vars: 
    netbox_version: *netbox_version
  tasks:
    - name: Copy local requirements.txt to the remote 'netbox' virtual environment
      copy:
        src: "{{ inventory_dir }}/src/requirements-{{ netbox_version }}.txt"
        dest: /opt/netbox/requirements.txt
        owner: root
        mode: 664

    - name: Copy pip packages from localhost to the remote server
      copy:
        src: "{{ inventory_dir }}/pip_packages/packages"
        dest: /opt

    - name: Install apps with pip from the local directory
      pip:
        requirements: /opt/netbox/requirements.txt
        virtualenv: /opt/netbox/venv/
        extra_args: "--no-index --find-links=file:///opt/packages"

    - name: Create the NetBox documentation
      tags: mkdocs
      shell: source venv/bin/activate && mkdocs build
      args:
        executable: /usr/bin/bash
        chdir: /opt/netbox

- name: Link local postgresql folders
  hosts: *server 
  gather_facts: false
  become: true # run as root
  tags: localdata
  vars:
    folders:
      - media
      - reports
      - scripts
  tasks:
    - name: Create netbox data folders
      file: 
        path: "/opt/localdata/{{ item }}"
        state: directory
        owner: netbox
        group: netbox
        mode: 0731
      loop: "{{ folders }}"

    - name: Create __init.py__ files
      file: 
        path: "/opt/localdata/{{ item }}/__init__.py"
        state: touch
        owner: netbox
        group: netbox
        mode: 0731
      loop: "{{ folders }}"

    - name: Remove / unlink existing folders
      file:
        path: "/opt/netbox/netbox/{{ item }}"
        state: absent
      loop: "{{ folders }}"

    - name: Crete symbolic links to localfiles
      file:
        src: "/opt/localdata/{{ item }}"
        dest: "/opt/netbox/netbox/{{ item }}"
        state: link
      loop: "{{ folders }}"

- name: Configure Django settings
  hosts: *server
  gather_facts: false
  become: true # run as root
  tags: django
  vars:
    project_path: /opt/netbox/netbox
    virtualenv: /opt/netbox/venv
  tasks:
    - name: Apply any database migrations
      community.general.django_manage:
        command: migrate
        project_path: "{{ project_path }}"
        virtualenv: "{{ virtualenv }}"

    - name: Trace any missing cable paths (no typically needed)
      community.general.django_manage:
        command: trace_paths --no-input
        project_path: "{{ project_path }}"
        virtualenv: "{{ virtualenv }}"

    - name: Collect static files
      community.general.django_manage:
        command: collectstatic --no-input
        project_path: "{{ project_path }}"
        virtualenv: "{{ virtualenv }}"

    - name: Delete any stale content types
      community.general.django_manage:
        command: remove_stale_contenttypes --no-input
        project_path: "{{ project_path }}"
        virtualenv: "{{ virtualenv }}"

    - name: Rebuild the search cache (lazily)
      community.general.django_manage:
        command: reindex --lazy
        project_path: "{{ project_path }}"
        virtualenv: "{{ virtualenv }}"

    - name: Delete any expired user sessions
      community.general.django_manage:
        command: clearsessions
        project_path: "{{ project_path }}"
        virtualenv: "{{ virtualenv }}"

- name: Enable and run NetBox services
  hosts: *server
  gather_facts: false
  become: true # run as root
  tags: services
  tasks:
    - name: Copy provided netbox service files
      copy:
        remote_src: true
        src: "/opt/netbox/contrib/{{ item }}"
        dest: "/etc/systemd/system/{{ item }}"
      loop:
        - netbox.service
        - netbox-rq.service

    - name: Enable and start netbox services
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - netbox
        - netbox-rq

- name: Install and configure the HTTP server
  hosts: *server
  gather_facts: false
  become: true # run as root
  tags: http
  vars: 
    production: *production
  tasks:
    - name: apt install nginx
      apt: 
        pkg: nginx
        state: latest
        update_cache: true

    - name: Copy the SSL key
      copy:
        src: "{{ local_src_folder }}/{{ item }}"
        dest:  /etc/ssl/private/
        owner: root
        mode: 0600
      loop:
        - pem_pass.txt
        - rzlx8750_serverkey.pem
      when: production

    - name: Copy the SSL key for a local test machine
      copy:
        src: "{{ local_src_folder }}/netbox.key"
        dest:  /etc/ssl/private/
        owner: root
        mode: 0600
      when: not production

    - name: Copy the SSL certificate
      copy:
        src: "{{ local_src_folder }}/netbox-bb.hs-esslingen.de.cer"
        dest: /etc/ssl/certs/
        owner: root
        mode: 0600
      when: production

    - name: Copy the SSL certificate for a local test machine
      copy:
        src: "{{ local_src_folder }}/netbox.crt"
        dest: /etc/ssl/certs/
        owner: root
        mode: 0600
      when: not production

    - name: Copy nginx config file
      copy: 
        src: "{{ local_src_folder }}/nginx.conf" 
        dest: /etc/nginx/sites-available/netbox
        backup: yes
        owner: root
        mode: 0644

    - name: Remove default nginx configs
      file: 
        path: /etc/nginx/sites-enabled/default
        state: absent
    
    - name: Link netbox configs to nginx
      file: 
        src: /etc/nginx/sites-available/netbox 
        dest: /etc/nginx/sites-enabled/default
        state: link

    - name: Restart the nginx service
      service: 
        name: nginx
        state: restarted
        enabled: yes

- name: Reboot the services
  hosts: *server
  gather_facts: false
  become: true 
  tags: reboot
  vars:
    reboot: *reboot
  tasks:
    - name: Restart the netbox service
      service: 
        name: netbox
        state: restarted
        enabled: yes

    - name: Reboot the server 
      reboot:
      when: reboot
...